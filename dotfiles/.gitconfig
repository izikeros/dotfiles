# https://csswizardry.com/2017/05/little-things-i-like-to-do-with-git/
# https://hackernoon.com/lesser-known-git-commands-151a1918a60
# https://blog.scottnonnenberg.com/better-git-configuration/
#
# NOTE - explanation of some options used in the aliases
# !
# This is a prefix that you can use with a Git command to run it as a shell command, rather than a Git subcommand. This can be useful if you want to use the output of one command as input to another command, or if you want to run a command that is not part of Git.

# --abbrev=0
# This option is used with the git describe command to ensure that only the tag name is printed, without any additional commit information. This can be useful if you want to get the name of the latest annotated tag, without any extra information.

# --abbrev-commit
# This option is used with the git log command to abbreviate the commit hash to a shorter, but still unique prefix. By default, Git shows the full 40-character commit hash, but this option allows you to shorten it to a specified number of characters (by default, 7 characters).

# --graph
# This option is used with the git log command to show the commit history in a graphical format, with branches and merges represented by lines connecting the commits. This can be useful if you want to visualize the structure of the commit history, and see how branches and merges have evolved over time.

# --oneline
# This option is used with the git log command to format the log output to show each commit on a single line, with the commit message truncated to the first line. This can be useful if you want to quickly scan through a large number of commits, and see the essential information for each commit in a compact format.

# --decorate
# This option is used with the git log command to show the names of branches and tags that point to each commit, in addition to the commit hash and message. This can be useful if you want to see which branches or tags are associated with each commit in the log output.

# --pretty=oneline
# This option is used with the git log command to format the log output in a specific way. In this case, it formats each commit on a single line, with the commit hash, author, and first line of the commit message separated by spaces. This is similar to the --oneline option, but with additional information.

# --no-merges
# This option is used with the git log command to exclude merge commits from the log output. By default, Git shows all commits, including merge commits, but this option allows you to filter out the merge commits and only show the non-merge commits in the log output. This can be useful if you want to focus on the mainline of development, and exclude the noise of merge commits.


[alias]
    ########### Basic aliases ###########
    # shows a list of all local and remote branches
    br = branch -v
    # stages all changes and commits (new files should be added anyway)
    ca = commit -a
    # combines staging and commit (new files should be added anyway)
    cam = commit -am
    # creates a new commit with the changes you have made since the last commit
    ci = commit
    # creates a new commit with a commit message
    cm = commit -m
    # clones a repository into a new directory
    cl = clone
    # shows the difference between the working directory and the last commit
    diff = diff --word-diff
    # shows the difference between the index and the last commit
    dc = diff --cached
    # switches to a specified branch or restores the working tree files
    co = checkout
    # opens gitk, a graphical history viewer
    k = !gitk
    # fetches the changes from the remote repository and merges them into the local one
    pu  = pull
    # fetches the changes from the remote repository and rebases them onto the local one
    pur = pull --rebase



    ######## LOG and DIFF ###############
    # check the difference between the current local branch and its remote counterpart
    #   When you run this command, it will show you the difference between the current
    #   local branch and its remote counterpart. The @{upstream} notation is a shortcut
    #   that Git provides, which refers to the remote tracking branch of the current
    #   local branch. This command is similar to running git diff HEAD origin/<current_branch_name>:.
    dup = !git --no-pager diff @{upstream}

    # show the commit log for the difference between the current branch and its remote counterpart
    lg-up = !git --no-pager log @{upstream}.. --abbrev-commit --pretty=oneline
    lg-down = !git --no-pager log ..@{upstream} --abbrev-commit --pretty=oneline

    # baseline log - showing tree, relative date, without pager, last 15 commits
    lg = !git --no-pager log \
        --graph \
        --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' \
        --abbrev-commit \
        --date=relative \
        -15

    # log - showing tree, relative date, with pager, all commits
    lg-all = !git log \
        --graph \
        --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' \
        --abbrev-commit \
        --date=relative

    # display change statistics (num of files changed, which files)
    lg-stat = !git log \
        --abbrev-commit \
        --graph \
        --pretty=oneline \
        --stat

    # List commits in short form, with colors and branch/tag annotations
    lg-short-log = log \
        --oneline \
        --decorate

    # Commits with date/(time)
    # showing absolute dates
    lg-date-absolute = log \
        --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" \
        --decorate \
        --date=short

    # 	showing relative dates: (e.g. $ git ld -10)
    lg-date-relative = log \
        --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" \
        --decorate \
        --date=relative

    # list 15 recent commits with graph, long date + relative date (1 day ago). Do not use pagination.
    lg-date-time-abs-rel = !git --no-pager log --graph \
        --abbrev-commit \
        --decorate \
        --all \
        --format=format:\"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)\" \
        -15

    # list all commits with graph, long date + relative date (1 day ago). Use pagination.
    lg-date-time-abs-rel-all = !git log --graph \
        --abbrev-commit \
        --decorate \
        --all \
        --format=format:\"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)\"

    # List 15 recent commits and files they changed, do not use pagination
    lg-files = !git --no-pager log \
        --pretty=format:"%Cgreen%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" \
        --decorate \
        --numstat -15

    # List all commits and files they changed, use pagination
    lg-files-pagin = !git log \
        --pretty=format:"%Cgreen%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" \
        --decorate \
        --numstat

    # see all the commits related to a file, with the diff of the changes
    lg-filelog = log -u

    ####### WHAT'S UP? ##########
    # List today's oneline commits
    lg-today = !git --no-pager log  --all \
        --graph \
        --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' \
        --abbrev-commit \
        --color \
        --date=short \
        --since=midnight
    lg-month     = !git --no-pager log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --color --date=short --since='1 month'

    # filter mine commits by the (my) email
    lg-my-week  = !git --no-pager log  \
        --graph \
        --pretty=format:'%C(yellow)%d%Creset %s %Cgreen(%ad, %cr)' \
        --abbrev-commit \
        --date=short \
        --all \
        --since='1 week' \
        --no-merges \
        --author="$(git config user.email)"

    lg-my-month  = !git --no-pager log  \
        --graph \
        --pretty=format:'%C(yellow)%d%Creset %s %Cgreen(%ad, %cr)' \
        --abbrev-commit \
        --date=short \
        --all \
        --since='1 month' \
        --no-merges \
        --author="$(git config user.email)"

    lg-all-week = log \
        --graph \
        --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' \
        --abbrev-commit \
        --date=relative \
        --all \
        --since='1 week' \
        --no-merges

    # list commits that are going to be pushed to remote repo
    # @{u} represents the upstream branch of the current branch, so git log @{u}..
    # lists commits on your current branch that havenâ€™t been pushed yet.
    # for some reason this alias don't work
    outgoing = log --oneline {u}..

    taxbreak = log \
        --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" \
        --decorate \
        --date=short \
        --since='1 month'

    # Git log in a compact format for all the commits between the latest annotated tag and the current HEAD
    lg-lt ="!git log $(git describe --tags --abbrev=0)..HEAD --oneline"

    # see commit stats per author
    stats = shortlog -sn --all --no-merges

	# List with no colors if you need to chain the out put with Unix pipes:
    lg-no-colors = log --pretty=format:"%h\\ %s\\ [%cn]"

    # 'date name' - used for further processing
    lstat = log --pretty=format:"%ad\\ %cn" --date=short

    # see only the commits (with diff) that have arrived since the last pull
    #
    # I am tracking quite a lot of open source projects by cloning them into ~/src
    # and running git pull on them occasionally. Next, I run git news and see only
    # the commits (with diff) that have arrived since the last pull.
    # (from: https://leahneukirchen.org/blog/archive/2013/01/a-grab-bag-of-git-tricks.html)
    news = log -p HEAD@{1}..HEAD@{0}

	# Show modified files in last commit:
	dl = "!git ll -1"

	# Show a diff last commit e.g.:
	# $ git f trenches
	# source/drafts/2012-11-12-more-curated-git-tips-from-the-trenches.html.md
	dlc = diff --cached HEAD^

	#### FIND & GREP
	# Find a file path in codebase:
	f = "!git ls-files | grep -i"

	# Search/grep your entire codebase for a string
	grep = grep -Ii
	gr = grep -Ii

	# Grep from root folder:
	gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

	# List all your Aliases
	la = "!git config -l | grep alias | cut -c 7-"

	find = !sh -c 'git ls-tree -r --name-only HEAD | grep --color $1' -

	st = status
	unstage = reset HEAD --
	v = !gvim $*

	### TAG
	lasttag = describe --tags --abbrev=0
	lt      = describe --tags --abbrev=0
    lt1 = !git describe $(git rev-list --tags --max-count=1)
    # tags with dates
    ltd = for-each-ref --sort=creatordate --format '%(refname:short) %(creatordate:short)' refs/tags

	### MERGE
    # delete all branches merged with origin/master
	cleanup-r-master = !git fetch -p | git branch --merged origin/master | grep -v 'master$' | xargs git branch -d

    # delete all branches merged with origin/develop
    cleanup-r-develop = !git branch --merged origin/develop | grep -v 'develop$' | grep -v 'master$' | xargs git branch -d

    # ours, theirs -  custom commands that simplify the process of resolving merge conflicts.
    # The general syntax "!f() { COMMANDS; }; f" is used to define a shell function to which you can pass arguments.
    # Here's how these commands work:
    #   1. "git co --ours $@" chooses our version of files for all paths specified by "$@". The "$@" is a placeholder for any arguments you might pass to the "ours" command.
    #   2. "git add $@" stages the changes made in the previous step.
    # The same process is followed for the "theirs" command, which first checks out their versions of the conflicted files, and then stages them.
    #
    # Together, these commands offer a quick way to resolve merge conflicts by choosing either our version or their version respectively without typing the full git commands.
    #  Use them in your terminal like this: "git ours [filename]" or "git theirs [filename]". They can resolve all conflicts in favor of either version or can be used
    #  file-by-file providing the flexibility to choose the best resolution for each merge conflict.
	ours = "!f() { git co --ours $@ && git add $@; }; f"
	theirs = "!f() { git co --theirs $@ && git add $@; }; f"

	### reset commands
	r = reset
	r1 = reset HEAD^
	r2 = reset HEAD^^
	rh = reset --hard
	rh1 = reset HEAD^ --hard
	rh2 = reset HEAD^^ --hard

	### STASH
	sl = stash list
	sa = stash apply
	ss = stash save
	set-upstream = !git branch --set-upstream-to=origin/$(git symbolic-ref --short HEAD)
	ac = !git add -A && git commit -m

[merge]
    #tool = kdiff3
    conflictstyle = diff3
[mergetool "mymeld"]
    #cmd = meld --diff $BASE $LOCAL --diff $BASE $REMOTE --diff $LOCAL $BASE $REMOTE $MERGED
    cmd = meld --diff $BASE $LOCAL --diff $BASE $REMOTE --auto-merge $LOCAL $BASE $REMOTE --output $MERGED
    #cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
    #
[mergetool "kdiff3"]
    trustExitCode = false
[diff]
    guitool = meld
    #guitool = kdiff3
[difftool "kdiff3"]
    trustExitCode = false
[push]
	default = current
[core]
	editor = vim
	pager = diff-so-fancy | less --tabs=4 -RFX
	excludesfile = /Users/krystian.safjan/.gitignore
	autocrlf = input
[gui]
	spellingdictionary = en_US
[pager]
	branch = false
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[color "diff"]
	meta = yellow
	frag = magenta bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse
[color]
	ui = true
[pull]
	ff = only
[difftool "nbdime"]
	cmd = git-nbdifftool diff \"$LOCAL\" \"$REMOTE\" \"$BASE\"
[difftool]
	prompt = false
[mergetool "nbdime"]
	cmd = git-nbmergetool merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
[mergetool]
	prompt = false
[init]
	defaultBranch = main
[credential "https://github.com"]
	helper =
#	helper = !/usr/local/bin/gh auth git-credential
[credential "https://gist.github.com"]
	helper =
#	helper = !/usr/local/bin/gh auth git-credential
[includeIf "gitdir:~/projects/eyproj/"]
    path = ~/.gitconfig-work
[includeIf "gitdir:~/projects/oss/"]
    path = ~/.gitconfig-priv
[includeIf "gitdir:/Users"]
    path = ~/.gitconfig-macos
[includeIf "gitdir:C:"]
    path = ~/.gitconfig-windows
[includeIf "gitdir:/home"]
    path = ~/.gitconfig-linux
[maintenance]
	repo = /Users/krystian.safjan/projects/eyproj/assurance-eyatlas-ai-guided-search

# https://csswizardry.com/2017/05/little-things-i-like-to-do-with-git/
# https://hackernoon.com/lesser-known-git-commands-151a1918a60
# https://blog.scottnonnenberg.com/better-git-configuration/
[alias]
	########### Basic aliases ###########
	br = branch -v

	# add to staged and commit (new files should be added anyway)
	ca = commit -a

	cam = commit -am
	ci = commit
	cm = commit -m

	cl = clone

	diff = diff --word-diff
	dc = diff --cached

	co = checkout
	k = !gitk
	pu  = pull
	pur = pull --rebase


	######## LOG and DIFF ###############
    #
    # https://git-scm.com/docs/git-log#_options
    #
    # show commits that differs development (or master) current HEAD
    # nice to inspect work in given feature branch
    hdevel = !git --no-pager log \
        origin/devel..HEAD \
        --abbrev-commit \
        --pretty=oneline

    hd = !git --no-pager log \
        origin/development..HEAD \
        --abbrev-commit \
        --pretty=oneline

    hm = !git --no-pager log \
        origin/master..HEAD \
        --abbrev-commit \
        --pretty=oneline

    # baseline log - showing tree, relative date, without pager
    lg = !git --no-pager log \
        --graph \
        --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' \
        --abbrev-commit \
        --date=relative \
        -15

    lg-all = !git log \
        --graph \
        --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' \
        --abbrev-commit \
        --date=relative

    # display change statistics (num of files changed, which files)
    lg-stat = !git log \
        --abbrev-commit \
        --graph \
        --pretty=oneline \
        --stat

    # List commits in short form, with colors and branch/tag annotations
    lg-short-log = log \
        --oneline \
        --decorate

    # Commits with date/(time)
    # showing absolute dates
    lg-date-absolute = log \
        --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" \
        --decorate \
        --date=short

    # 	showing relative dates: (e.g. $ git ld -10)
    lg-date-relative = log \
        --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" \
        --decorate \
        --date=relative

    # list 15 recent commits with graph, long date + relative date (1 day ago). Do not use pagination.
    lg-date-time-abs-rel = !git --no-pager log --graph \
        --abbrev-commit \
        --decorate \
        --all \
        --format=format:\"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)\" \
        -15

    # list all commits with graph, long date + relative date (1 day ago). Use pagination.
    lg-date-time-abs-rel-all = !git log --graph \
        --abbrev-commit \
        --decorate \
        --all \
        --format=format:\"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)\"

    # List 15 recent commits and files they changed, do not use pagination
    lg4 = !git --no-pager log \
        --pretty=format:"%Cgreen%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" \
        --decorate \
        --numstat -15

    # List all commits and files they changed, use pagination
    lg5 = !git log \
        --pretty=format:"%Cgreen%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" \
        --decorate \
        --numstat

    # see all the commits related to a file, with the diff of the changes
    lg-filelog = log -u

    ####### WHAT'S UP? ##########
    # List today's oneline commits
    lg-today = !git --no-pager log  --all \
        --graph \
        --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' \
        --abbrev-commit \
        --color \
        --date=short \
        --since=midnight
    lg-month     = !git --no-pager log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --color --date=short --since='1 month'

    # filter mine commits by the email
    lg1-my-week  = !git --no-pager log  \
        --graph \
        --pretty=format:'%C(yellow)%d%Creset %s %Cgreen(%ad, %cr)' \
        --abbrev-commit \
        --date=short \
        --all \
        --since='1 week' \
        --no-merges \
        --author=krystian.safjan@nokia.com

    lg1-my-month  = !git --no-pager log  \
        --graph \
        --pretty=format:'%C(yellow)%d%Creset %s %Cgreen(%ad, %cr)' \
        --abbrev-commit \
        --date=short \
        --all \
        --since='1 month' \
        --no-merges \
        --author=krystian.safjan@nokia.com

    lg1-all-week = log \
        --graph \
        --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' \
        --abbrev-commit \
        --date=relative \
        --all \
        --since='1 week' \
        --no-merges

    lg-all-week  = log \
        --all \
        --since='1 weeks' \
        --oneline \
        --no-merges

    taxbreak = log \
        --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" \
        --decorate \
        --date=short \
        --since='1 month'

    # see commit stats per author
    stats = shortlog -sn --all --no-merges

	# List with no colors if you need to chain the out put with Unix pipes:
    lg-no-colors = log --pretty=format:"%h\\ %s\\ [%cn]"

    # 'date name' - used for further processing
    lstat = log --pretty=format:"%ad\\ %cn" --date=short

	# Show modified files in last commit:
	dl = "!git ll -1"

	# Show a diff last commit e.g.:
	# $ git f trenches
	# source/drafts/2012-11-12-more-curated-git-tips-from-the-trenches.html.md
	dlc = diff --cached HEAD^

	#### FIND & GREP
	# Find a file path in codebase:
	f = "!git ls-files | grep -i"

	# Search/grep your entire codebase for a string
	grep = grep -Ii
	gr = grep -Ii

	# Grep from root folder:
	gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

	# List all your Aliases
	la = "!git config -l | grep alias | cut -c 7-"

	find = !sh -c 'git ls-tree -r --name-only HEAD | grep --color $1' -

	st = status
	unstage = reset HEAD --
	v = !gvim $*

	### TAG
	lasttag = describe --tags --abbrev=0
	lt = describe --tags --abbrev=0
	lt1 = !git describe $(git rev-list --tags --max-count=1)

	### MERGE
    # delete all branches merged with master
	cleanup-r-master = !git branch --merged master | grep -v 'master$' | xargs git branch -d

	ours = "!f() { git co --ours $@ && git add $@; }; f"
	theirs = "!f() { git co --theirs $@ && git add $@; }; f"

	### reset commands
	r = reset
	r1 = reset HEAD^
	r2 = reset HEAD^^
	rh = reset --hard
	rh1 = reset HEAD^ --hard
	rh2 = reset HEAD^^ --hard

	### STASH
	sl = stash list
	sa = stash apply
	ss = stash save
	set-upstream = !git branch --set-upstream-to=origin/$(git symbolic-ref --short HEAD)
	ac = !git add -A && git commit -m

[merge]
    #tool = kdiff3
    conflictstyle = diff3

[mergetool "mymeld"]
    #cmd = meld --diff $BASE $LOCAL --diff $BASE $REMOTE --diff $LOCAL $BASE $REMOTE $MERGED
    cmd = meld --diff $BASE $LOCAL --diff $BASE $REMOTE --auto-merge $LOCAL $BASE $REMOTE --output $MERGED
    #cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
[mergetool "kdiff3"]
    trustExitCode = false
[diff]
    guitool = meld
    #guitool = kdiff3
[difftool "kdiff3"]
    trustExitCode = false

# [user]
# 	name = Krystian Safjan
# 	email = ksafjan@gmail.com
[push]
	default = current
[core]
	editor = vim
    pager = diff-so-fancy | less --tabs=4 -RFX
	excludesfile = /home/safjan/.gitignore
	autocrlf = input

[gui]
	spellingdictionary = en_US
[pager]
	branch = false
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[color "diff"]
	meta = yellow
	frag = magenta bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse
[color]
	ui = true
[pull]
	ff = only
[difftool "nbdime"]
	cmd = git-nbdifftool diff \"$LOCAL\" \"$REMOTE\" \"$BASE\"
[difftool]
	prompt = false
[mergetool "nbdime"]
	cmd = git-nbmergetool merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
[mergetool]
	prompt = false
[init]
	defaultBranch = main

#!/usr/bin/env bash

function h-bash-if(){
    # cat <<-  using <<- instead of << will ignore leading tabs or spaces
    cat <<- EOF
    Operator 	Description
    ! EXPRESSION 	The EXPRESSION is false.
    -n STRING 	The length of STRING is greater than zero.
    -z STRING 	The lengh of STRING is zero (ie it is empty).
    STRING1 = STRING2 	STRING1 is equal to STRING2
    STRING1 != STRING2 	STRING1 is not equal to STRING2
    INTEGER1 -eq INTEGER2 	INTEGER1 is numerically equal to INTEGER2
    INTEGER1 -gt INTEGER2 	INTEGER1 is numerically greater than INTEGER2
    INTEGER1 -lt INTEGER2 	INTEGER1 is numerically less than INTEGER2
    -d FILE 	FILE exists and is a directory.
    -e FILE 	FILE exists.
    -r FILE 	FILE exists and the read permission is granted.
    -s FILE 	FILE exists and it's size is greater than zero (ie. it is not empty).
    -w FILE 	FILE exists and the write permission is granted.
    -x FILE 	FILE exists and the execute permission is granted.
EOF
}

function h-regex(){
cat <<- EOF
\s - matches any whitespace character (equal to [\r\n\t\f\v ])
\w - matches any word character (equal to [a-zA-Z0-9_])
? - "zero or one": Matches between zero and one times, as many times as possible, giving back as needed (greedy)
+ - "one or more": Matches between one and unlimited times, as many times as possible, giving back as needed (greedy)
* - "zero or more": Matches between zero and unlimited times, as many times as possible, giving back as needed (greedy)
a{3,} - three or more of a
$ - start of string
^ - end of string
[^abc] - matches any character except for an a, b or c

EOF
}

function h-awk(){
cat <<- EOF
display column 2, where separator is ':'
    awk -F':' '{print \$2}'

sum-up column of numbers (e.g. output of parallel xargs such as counting lines)
    awk '{s+=$1} END {print s}'
EOF
}

function h-grep(){
cat <<- EOF
Do (-H)/ do not (-h) display filename
EOF
}

function h-sed(){
cat <<- EOF
Remove first line (-i inplace - save to the same file)
    sed -i 1d
Remove leading spaces and tabs
    sed -e 's/^[ \t]*//'
EOF
}

function h-perl(){
cat <<- EOF
Filter on absolute fold-changes and p-values, located in this case in columns 3 and 5 (indexed 2 and 4), respectively:

perl -lane 'print if (abs($F[2]) >= 2 and $F[4] <= 0.05)' input > output

??
echo "(a b c)(a b c)" | perl -ne 'print $1 while /(a) b/g'
EOF
}

function h-terminator(){
cat <<- EOF
Super+R - rotate | C-S-E - split vert | C-S-O - split horiz
EOF
}

function h-comm(){
cat <<- EOF
#find lines only in file1
comm -23 file1 file2

#find lines only in file2
comm -13 file1 file2

#find lines common to both files
comm -12 file1 file2

       -1     suppress column 1 (lines unique to FILE1)

       -2     suppress column 2 (lines unique to FILE2)

       -3     suppress column 3 (lines that appear in both files)
EOF
}

function h-wc(){
cat <<- EOF
# assign number of lines to variable
a=\$(wc -l < file.txt)
EOF
}

function h-tilda(){
cat <<- EOF
F1 – Pull down and pull up (Hide and Show) Tilda terminal window.
SHIFT+CTRL+T – Open a new tab.
SHIFT+CTRL+W – Close the active tab.
CTRL+PAGE_UP – Go to previous tab.
CTRL+PAGE_DOWN – Go to next tab.
SHIFT+CTRL+PAGE_UP – Move tab left.
SHIFT+CTRL+PAGE_DOWN – Move tab right.
<ALT>1 – Go to tab 1.
<ALT>2 – Go to tab 2.
<ALT>0 – Go to tab 10.
SHIFT+CTRL+C – Copy text from Tilda window.
SHIFT+CTRL+V – Paste text in Terminal.
F11 – Toggle full screen.
F12 – Toggle Transparency.
SHIFT+CTRL+F – Search.
SHIFT+CTRL+Q – Quit Tilda Terminal.
EOF
}

function h-tmux(){
cat <<- EOF
* start new with session name: 'tmux new -s myname'
* attach:  'tmux a  #  (or at, or attach)'
* attach to named:  'tmux a -t myname'
* list sessions: 'tmux ls'
* kill session:  'tmux kill-session -t myname'
* Kill all the tmux sessions:
  tmux ls | grep : | cut -d. -f1 | awk '{print substr($1, 0, length($1)-1)}' | xargs kill

In tmux, hit the prefix ctrl+b (my modified prefix is ctrl+a) and then:
=== Sessions
:new<CR>  new session
s  list sessions
$  name session

=== Windows (tabs)
c  create window
w  list windows
n  next window
p  previous window
f  find window
,  name window
&  kill window

=== Panes (splits)
%  vertical split
"  horizontal split
o  swap panes
q  show pane numbers
x  kill pane
+  break pane into window (e.g. to select text by mouse to copy)
-  restore pane from window
⍽  space - toggle between layouts
<prefix> q (Show pane numbers, when the numbers show up type the key to goto that pane)
<prefix> { (Move the current pane left)
<prefix> } (Move the current pane right)
<prefix> z toggle pane zoom

=== Sync Panes
You can do this by switching to the appropriate window, typing your Tmux prefix (commonly Ctrl-B or Ctrl-A) and then a colon to bring up a Tmux command line, and typing:
:setw synchronize-panes
You can optionally add on or off to specify which state you want; otherwise the option is simply toggled. This option is specific to one window, so it won’t change the way your other sessions or windows operate. When you’re done, toggle it off again by repeating the command. tip source

=== Resizing Panes
You can also resize panes if you don’t like the layout defaults. I personally rarely need to do this, though it’s handy to know how. Here is the basic syntax to resize panes:
PREFIX : resize-pane -D/U/L/R (Resizes the current pane down, up, left, right)
PREFIX : resize-pane -D/U/L/R 20 (Resizes the current pane down/up/left/right by 20 cells)
PREFIX : resize-pane -t 2 20 (Resizes the pane with the id of 2 down by 20 cells)
PREFIX : resize-pane -t -L 20 (Resizes the pane with the id of 2 left by 20 cells)
EOF
}
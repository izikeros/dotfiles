#!/bin/bash

# NOTE function identifiers with dash are not valid for BASH

# == Vimviki and diary functions
#function d_file_today(){    # return filename for the diary for today
#    d_file_offset()
#}


function d_file_offset(){    # return filename for the diary for given offset
    offset=$1
    if [ -z ${offset} ]; then offset=0; fi
    DATE=$(date -d "${offset}days 13:00" +%Y-%m-%d)
    DOW=$(date "-d ${offset}days 13:00" +%u)
    days=(m t w h f s x)
    DAY_LETTER=${days[$DOW]}
    FNAME="${DATE}_${DAY_LETTER}"
    echo "$FNAME"
}


function diary(){		# open diary page for today or day with given days offset (parameter)
    FNAME=$(d_file_offset $1)
    FULL_FILE="$HOME/vimwiki/diary/$FNAME.md"
    if [ -s $FULL_FILE ]
    then
        subl3 $FULL_FILE
    else
        echo $FNAME > $FULL_FILE
        subl3 $FULL_FILE
    fi

}


function v-someday(){		# search vimwiki pages looking for someday annotation
	find "$HOME/vimwiki" -type f -name "*.md" | xargs grep -i 'someday'
}

function v-todo(){		# search vimwiki pages looking for todo annotation
	find "$HOME/vimwiki" -type f -name "*.md" | xargs grep -i 'todo'
}

# == Find functions
function fipy(){	# find in python files
  grep -F --include="*.py" --exclude-dir={.git} --color=always -rnwi ./ -e  $1 | less -R
}

function fipy2(){	# find in python files - grep using two keywords
  grep -F --include="*.py" --exclude-dir={.git} --color=always -rnwi ./ -e $1 | grep $2
}

function fipy-in-test(){	# find in python test files - grep using two keywords
  grep -F --include="test*.py" --exclude-dir={.git} --color=always -rnwi ./ -e $1 | less -R
}

# == Packages-related functions
function asa(){		# search only in deb package names starting with pattern
  aptitude search ^$1 | awk '{print $2}'
  }

function pips(){  # install pip package and save it's name into requirements.txt
        echo $'\n'$1 >> requirements.txt; pip install $1
    }

# == Docker-related functions
# source: https://github.com/rhoit/my-config/blob/master/shell/shellrc.d/docker.sh
function dimg(){	# list docker images
    docker images $@ |
        sed "s/  \+/;/g" |
        column -s\; -t |
        sed "1s/.*/\x1B[1m&\x1B[m/"
}

# http://networkstatic.net/10-examples-of-how-to-get-docker-container-ip-address/
function dockerip(){	# display IP of docker image
  docker inspect --format '{{ .NetworkSettings.IPAddress }}' "$@"
}

function docker_fit(){	# docker fit output (???)
    docker $@ |
    sed '
        1s/ *NAMES$//g;
        s/ *[a-z]\+_[a-z]\+$//g;
        s/"\(.*\)"/\1/g;
        s/ seconds/s/g;
        s/ minutes/m/g;
        s/ hours/h/g;
        s/About a minute/1m/g;
        s/About an hour/1h/g;
        s/Exited (\([0-9]\+\)) \(.*\)ago/exit(\1)~\2/;
        s/->/→/g
        ' |
    sed "s/  \+/;/g" |
    column -s\; -t |
    sed "1s/.*/\x1B[1m&\x1B[m/"
}

function dlc(){		# cache docker last container id DOCKER_CACHE
    1>&2 docker ps -l
    export DOCKER_CACHE=$(docker ps -lq)
}

function dlo(){		# display logs of container with given name or name stores in cache (see: dlc function)
    if [[ -t 1 ]]; then
        while read data; do
            args+="$data"
        done
        docker logs $args
        return
    fi
    if [[ $DOCKER_CACHE != "" ]]; then
        docker logs $DOCKER_CACHE
        return
    fi
    docker logs $@
}

function drm(){		# remove docker container using rofi
    echo "$(docker ps -a | rofi -threads 0 -width 100 -dmenu -i -p "locate:")" | awk {'print $1'} | xargs docker rm
}

function drmi(){	# remove docker image using rofi
    echo "$(docker images | rofi -threads 0 -width 100 -dmenu -i -p "locate:")" | awk {'print $1'} | xargs docker rmi
}

# == Git related functions
function rco(){		# git checkout to one of the recent branches
    echo "$(recent-branches | rofi -threads 0 -width 100 -dmenu -i -p "locate:")" | xargs git checkout
}

function todos-blame(){	# git blame who put TODO statement in the code
    AUTHOR=$1
    TYPE=$2
    AUTHOR="${AUTHOR:-Krystian}"
    TYPE="${TYPE:-TODO}"
    for FILE in $(git ls-files)
    do
        git blame $FILE | grep "$1" | grep "$2";
    done
}

# == Filesystem related functions
function mkcd () {	# create directory and move into it
  mkdir -p "$1"
  cd "$1"
}

function extract() {	# extract content from archive
    if [ -f $1 ] ; then
        case $1 in
            *.7z)       7z x $1       ;;
            *.Z)        uncompress $1 ;;
            *.bz2)      bunzip2 $1    ;;
            *.gz)       gunzip $1     ;;
            *.rar)      rar x $1      ;;
            *.tar)      tar xf $1     ;;
            *.tar.bz2)  tar xjf $1    ;;
            *.tar.gz)   tar xzf $1    ;;
            *.tar.xz)   tar xf $1     ;;
            *.tbz2)     tar xjf $1    ;;
            *.tgz)      tar xzf $1    ;;
            *.zip)      unzip $1      ;;
            *)          echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# from zgen starting kit (Joseph Block <jpb@unixorn.net>)
function chg-ext() {	# Batch change extension from $1 to $2
  for file in *.$1
  do
    mv "$file" $(echo "$file" | sed "s/\(.*\.\)$1/\1$2/")
  done
}


function exists() {   # ???
  if (( $+commands[$1] )); then return 0; else return 1; fi
}

function ff() { # find file with given name (or pattern) from cads@ooyala.com
  find . -type f -iname '*'$@'*' -ls
}

# == Networking related functions
function scan24() {	# Probe a /24 network for hosts
  nmap -sP ${1}/24
}

function mecp () {  # scp file to machine you're sshing into this machine from
  scp "$@" ${SSH_CLIENT%% *}:"$HOME/Downloads/";
}

function pong(){  # ???
  ping -c 10 "$@"
}

# Originally from https://github.com/bamos/dotfiles/blob/master/.funcs
function nj() {   # Netjoin - Block until a network connection is obtained.
  while true; do
    ping -c 1 8.8.8.8 &> /dev/null && break
    sleep 1
  done
}

# from https://github.com/jleclanche/dotfiles/blob/master/.zshrc
function htmime { # get the content type of an http resource
  if [[ -z $1 ]]; then
    print "USAGE: htmime <URL>"
    return 1
  fi
  mime=$(curl -sIX HEAD $1 | sed -nr "s/Content-Type: (.+)/\1/p")
  print $mime
}

function httpserver(){  # Start an HTTP server (python) from a directory, optionally specifying the port
  local port="${1:-8000}";
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}


# from: https://coderwall.com/p/hwu5uq?i=9&p=1&q=sort%3Ascore+desc&t%5B%5D=zsh
function pjson {	# Pretty JSON
  if [ $# -gt 0 ];
    then
    for arg in $@
    do
      if [ -f $arg ];
        then
        less $arg | python -m json.tool
      else
        echo "$arg" | python -m json.tool
      fi
    done
  fi
}

# == History and env related functions
function hgrep40 {	# history-grep: find things in that enormous command history file (last 40 results)
  history | egrep --color -i "$@" | tail -40
}

function hgrep {	# history-grep: find things in that enormous command history file (last 20 results)
  history | grep -i "$@" | tail -20
}

function hgrep_full {	# history-grep: find things in that enormous command history file (all results)
  history | egrep --color -i "$@"
}

function envgrep() {	# grep through evnironmental variables
  printenv | grep -i "$@"
}

# From Dan Ryan's blog - http://danryan.co/using-antigen-for-zsh.html
man() {		# some settings for man?
  env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
      man "$@"
}

# From commandlinefu.com
function watch() {
	t=$1; shift; while test :; do clear; date=$(date); echo -e "Every $ts: $@ \t\t\t\t $date"; $@; sleep $t; done
}


# == Calculation functions
function calc() {	# calcularor
  awk "BEGIN{ print $* }" ;
}

# == Begin sysadvent2011
# for instructions and other data manipulation tools from console visit:
# http://sysadvent.blogspot.com/2011/12/day-9-data-in-shell.html


function _awk_col(){  # get col number and add
  echo "$1" | egrep -v '^[0-9]+$' || echo "\$$1"
}

function sum(){   # sum by n-th field
  # usage: sum column_idx
  #
  # Example:
  # Simply sum the first field
  # % seq 10 | sum 1
  # 55
  [ "${1#-F}" != "$1" ] && SP=${1} && shift
  [ "$#" -eq 0 ] && set -- 0
  key="$(_awk_col "$1")"
  awk $SP "{ x+=$key } END { printf(\"%d\n\", x) }"
}

function sumby(){ # group and sum
    # Example:
    # # Sum one field grouping by another
    # printf "hello:1\nworld:1\nworld:3\n" |sumby -F: 1 2
    # 4 world
    # 1 hello
    #
    [ "${1#-F}" != "$1" ] && SP=${1} && shift
    [ "$#" -lt 0 ] && set -- 0 1
    key="$(_awk_col "$1")"
    val="$(_awk_col "$2")"
    awk $SP "{ a[$key] += $val } END { for (i in a) { printf(\"%d %s\\n\", a[i], i) } }"
}

function countby(){   # Count instances by field
    # Example:
    ## Count instances by field
    # % printf "hello:1\nworld:1\nworld:3\n" | countby -F: 1
    # 2 world
    # 1 hello
    #
  [ "${1#-F}" != "$1" ] && SP=${1} && shift
  [ "$#" -eq 0 ] && set -- 0
  key="$(_awk_col "$1")"
  awk $SP "{ a[$key]++ } END { for (i in a) { printf(\"%d %s\\n\", a[i], i) } }"
}
# end sysadvent

function awk_col(){ # print selected column (space separated file)
    awk -F' ' "{print \$$1}"
}


# == Shell and processes functions
function procs_for_path() {		# list processes for given path
  for pid in $(lsof "$@" | cut -d' ' -f 3 | sort | uniq)
  do
    ps -f -p $pid
  done
}

function zombie() { # lists zombie processes
  ps aux | awk '{if ($8=="Z") { print $2 }}'
}

function get_nr_jobs(){ # get number of jobs in the system
  jobs | wc -l
}

function get_load(){  # get system load
  uptime | awk '{print $11}' | tr ',' ' '
}

function bash_repeat(){ # repeat command n times: bash_repeat 3 whoami
  n=$1
  shift
  while [ $(( n -= 1 )) -ge 0 ]
  do
      "$@"
  done
}

#function authme {	# send authentication key (id_dsa.pub) to remote host
#  ssh "$1" 'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys' < ~/.ssh/id_dsa.pub
#}


function canhaz(){	# Recursively touch, e.g. touch + mkdir -p so files can easily be created at depth
  mkdir -p -- "${1%/*}" && touch -- "$1"
}

function canhaz-script(){ # Recursively touch with execute flag, e.g. touch + mkdir -p so files can easily be created at depth
  canhaz "${1}" && chmod +x "$1"
}

function ws(){ # Create new file for script with execute flag, edit in vim
    touch "$1" && chmod +x "$1" && vim "$1"
}

function fix_tmux_ssh_agent() { # ???
  for key in SSH_AUTH_SOCK SSH_CONNECTION SSH_CLIENT; do
    if (tmux show-environment | grep "^${key}" > /dev/null); then
      value=$(tmux show-environment | grep "^${key}" | sed -e "s/^[A-Z_]*=//")
      export ${key}="${value}"
    fi
  done
}

function piadd(){ # pacman install and add to ext.txt packages list
    sudo pacman -S $1
    local fname="$HOME/dotfiles/restore/pkg/manual.txt"
    echo ">>>> adding $1 to manual.txt package list"

    if [[ -e $fname ]]
    then
        echo $1 >> $fname
    else
        echo $1 > $fname
    fi

    # ensure there are no duplicates on the list
    #sort -u $fname > /tmp/sorted
    #mv /tmp/sorted $fname
}

#----------------
# dedupe path
#---------------
# In case a plugin adds a redundant path entry, remove duplicate entries
# from PATH
#
# This snippet is from Mislav Marohnić <mislav.marohnic@gmail.com>'s
# dotfiles repo at https://github.com/mislav/dotfiles
function dedupe_path() { # In case a plugin adds a redundant path entry, remove duplicate entries from PATH
  typeset -a paths result
  paths=($path)

  while [[ ${#paths} -gt 0 ]]; do
    p="${paths[1]}"
    shift paths
    [[ -z ${paths[(r)$p]} ]] && result+="$p"
  done

  export PATH=${(j+:+)result}
}

function h-bash-if(){
    # cat <<-  using <<- instead of << will ignore leading tabs or spaces
    cat <<- EOF
    Operator 	Description
    ! EXPRESSION 	The EXPRESSION is false.
    -n STRING 	The length of STRING is greater than zero.
    -z STRING 	The lengh of STRING is zero (ie it is empty).
    STRING1 = STRING2 	STRING1 is equal to STRING2
    STRING1 != STRING2 	STRING1 is not equal to STRING2
    INTEGER1 -eq INTEGER2 	INTEGER1 is numerically equal to INTEGER2
    INTEGER1 -gt INTEGER2 	INTEGER1 is numerically greater than INTEGER2
    INTEGER1 -lt INTEGER2 	INTEGER1 is numerically less than INTEGER2
    -d FILE 	FILE exists and is a directory.
    -e FILE 	FILE exists.
    -r FILE 	FILE exists and the read permission is granted.
    -s FILE 	FILE exists and it's size is greater than zero (ie. it is not empty).
    -w FILE 	FILE exists and the write permission is granted.
    -x FILE 	FILE exists and the execute permission is granted.
EOF
}

function h-regex(){
cat <<- EOF
\s - matches any whitespace character (equal to [\r\n\t\f\v ])
\w - matches any word character (equal to [a-zA-Z0-9_])
? - "zero or one": Matches between zero and one times, as many times as possible, giving back as needed (greedy)
+ - "one or more": Matches between one and unlimited times, as many times as possible, giving back as needed (greedy)
* - "zero or more": Matches between zero and unlimited times, as many times as possible, giving back as needed (greedy)
a{3,} - three or more of a
$ - start of string
^ - end of string
[^abc] - matches any character except for an a, b or c

EOF
}

function h-awk(){
cat <<- EOF
display column 2, where separator is ':'
    awk -F':' '{print \$2}'

sum-up column of numbers (e.g. output of parallel xargs such as counting lines)
    awk '{s+=$1} END {print s}'
EOF
}



function h-sed(){
cat <<- EOF
Remove first line (-i inplace - save to the same file)
    sed -i 1d
EOF
}

function h-perl(){
cat <<- EOF
Filter on absolute fold-changes and p-values, located in this case in columns 3 and 5 (indexed 2 and 4), respectively:

perl -lane 'print if (abs($F[2]) >= 2 and $F[4] <= 0.05)' input > output

??
echo "(a b c)(a b c)" | perl -ne 'print $1 while /(a) b/g'
EOF
}

function h-terminator(){
cat <<- EOF
Super+R - rotate | C-S-E - split vert | C-S-O - split horiz
EOF
}

function h-comm(){
cat <<- EOF
#find lines only in file1
comm -23 file1 file2

#find lines only in file2
comm -13 file1 file2

#find lines common to both files
comm -12 file1 file2

       -1     suppress column 1 (lines unique to FILE1)

       -2     suppress column 2 (lines unique to FILE2)

       -3     suppress column 3 (lines that appear in both files)
EOF
}

function ys-popular(){
    ys $1 | grep -e + | sed -e 's/(+//' | awk -F' ' '{print $3", "$1}' | sort -nr | head -10
}


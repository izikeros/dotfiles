#!/usr/bin/env bash

# NOTE function identifiers with dash are not valid for BASH

function d_file_offset(){    # return filename for the diary for given offset
    offset=$1
    USE_OFFSET=false
    if [ -z "${offset}" ]; then offset=0; fi
    if [[ $OSTYPE == *darwin* ]]; then
        # NOTE: requires GNU coreutils installed
        DATE=$(gdate -d "${offset}days 13:00" +%Y-%m-%d)
        DOW=$(gdate "-d ${offset}days 13:00" +%u)
    else
        DATE=$(date -d "${offset}days 13:00" +%Y-%m-%d)
        DOW=$(date "-d ${offset}days 13:00" +%u)
    fi
    if [ "$USE_OFFSET" = true ]; then
        days=(m t w h f s x)
        DAY_LETTER=${days[$DOW]}
        FNAME="${DATE}_${DAY_LETTER}"
    else
        FNAME="${DATE}"
    fi
    echo "$FNAME"
}

function today() {      # display today's date in format YYYY-MM-DD
    date  +%Y-%m-%d
}

function diary(){		# open diary page for today or day with given days offset (parameter)
    FNAME=$(d_file_offset "$1")
    YEAR=$(date +%Y)
    FULL_FILE=$HOME/vimwiki/diary/"$YEAR"/"$FNAME".md
    if [ -s "$FULL_FILE" ]
    then
        subl "$FULL_FILE"
    else
        echo "$FNAME" > "$FULL_FILE"
        subl "$FULL_FILE"
    fi

}


function v-someday(){		# search vimwiki pages looking for someday annotation
	find "$HOME/vimwiki" -type f -name "*.md" | xargs grep -i 'someday'
}

function v-todo(){		# search vimwiki pages looking for todo annotation
	find "$HOME/vimwiki" -type f -name "*.md" | xargs grep -i 'todo'
}

function days_since_beginning_of_year() {
    # local year=$1
    # local month=$2
    # local day=$3
    local days_since_beginning_of_year=$(date -d "$year-$month-$day" +%j)
    echo $days_since_beginning_of_year
}

function calculate_percentage_from_two_values() {
    local value1=$1
    local value2=$2
    local percentage=$(echo "scale=2; $value1 / $value2 * 100" | bc)
    echo $percentage
}

function diary_score () {
    local year=$(date +%Y)
    local num_days=$(days_since_beginning_of_year)
    local num_entries=$(ls $HOME/vimwiki/diary/$year | wc -l)
    echo $(calculate_percentage_from_two_values $num_entries $num_days)"%"
}

# == Find functions

function fipy(){	# find in python files
  grep -F --include="*.py" --exclude-dir={.git} --color=always -rnwi ./ -e  "$1" | less -R
}

function fipy2(){	# find in python files - grep using two keywords
  grep -F --include="*.py" --exclude-dir={.git} --color=always -rnwi ./ -e "$1" | grep "$2"
}

function fipy-in-test(){	# find in python test files - grep using two keywords
  grep -F --include="test*.py" --exclude-dir={.git} --color=always -rnwi ./ -e "$1" | less -R
}

# == Packages-related functions
function pips(){  # install pip package and save it's name into requirements.txt
        echo $'\n'"$1" >> requirements.txt; pip install "$1"
    }

# == Docker-related functions
# source: https://github.com/rhoit/my-config/blob/master/shell/shellrc.d/docker.sh
function dimg(){	# list docker images
    docker images "$@" |
        sed "s/  \+/;/g" |
        column -s\; -t |
        sed "1s/.*/\x1B[1m&\x1B[m/"
}

# http://networkstatic.net/10-examples-of-how-to-get-docker-container-ip-address/
function dockerip(){	# display IP of docker image
  docker inspect --format '{{ .NetworkSettings.IPAddress }}' "$@"
}

function docker_fit(){	# docker fit output (???)
    docker "$@" |
    sed '
        1s/ *NAMES$//g;
        s/ *[a-z]\+_[a-z]\+$//g;
        s/"\(.*\)"/\1/g;
        s/ seconds/s/g;
        s/ minutes/m/g;
        s/ hours/h/g;
        s/About a minute/1m/g;
        s/About an hour/1h/g;
        s/Exited (\([0-9]\+\)) \(.*\)ago/exit(\1)~\2/;
        s/->/â†’/g
        ' |
    sed "s/  \+/;/g" |
    column -s\; -t |
    sed "1s/.*/\x1B[1m&\x1B[m/"
}

function dlc(){		# cache docker last container id DOCKER_CACHE
    1>&2 docker ps -l
    DOCKER_CACHE=$(docker ps -lq)
    export DOCKER_CACHE
}

function dlo(){		# display logs of container with given name or name stores in cache (see: dlc function)
    if [[ -t 1 ]]; then
        while read data; do
            args+="$data"
        done
        docker logs "$args"
        return
    fi
    if [[ $DOCKER_CACHE != "" ]]; then
        docker logs "$DOCKER_CACHE"
        return
    fi
    docker logs "$@"
}

function drm(){		# remove docker container using rofi
    docker ps -a | rofi -width 100 -dmenu -i -p "locate:" | awk '{print $1}' | xargs docker rm
}

function drmi(){	# remove docker image using rofi
    echo "$(docker images | rofi -threads 0 -width 100 -dmenu -i -p "locate:")" | awk '{print $1}' | xargs docker rmi
}

# == Git related functions
function rco(){		# git checkout to one of the recent branches
    if [[ $OSTYPE == *darwin* ]]; then
        echo "$(recent-branches | choose)" | xargs git checkout
    else
        echo "$(recent-branches | rofi -threads 0 -width 100 -dmenu -i -p "locate:")" | xargs git checkout
    fi
}

function todos-blame(){	# git blame who put TODO statement in the code
    AUTHOR=$1
    TYPE=$2
    AUTHOR="${AUTHOR:-Krystian}"
    TYPE="${TYPE:-TODO}"
    for FILE in $(git ls-files)
    do
        git blame "$FILE" | grep "$1" | grep "$2";
    done
}

# == Filesystem related functions
function mkcd() {	# create directory and move into it
  mkdir -p "$1"
  cd "$1" || exit
}

# from zgen starting kit (Joseph Block <jpb@unixorn.net>)
function chg-ext() {	# Batch change extension from $1 to $2
  for file in *."$1"
  do
    mv "$file" "$(echo "$file" | sed "s/\(.*\.\)$1/\1$2/")"
  done
}

function ff() { # find file with given name (or pattern) from cads@ooyala.com
  find . -type f -iname '*'$@'*' -ls
}

# == Networking related functions
function scan24() {	# Probe a /24 network for hosts
  nmap -sP ${1}/24
}

function mecp() {  # scp file to machine you're sshing into this machine from
  scp "$@" ${SSH_CLIENT%% *}:"$HOME/Downloads/";
}

function pong(){  # ???
  ping -c 10 "$@"
}


# from: https://coderwall.com/p/hwu5uq?i=9&p=1&q=sort%3Ascore+desc&t%5B%5D=zsh
function pjson {	# Pretty JSON
  if [ $# -gt 0 ];
    then
    for arg in $@
    do
      if [ -f $arg ];
        then
        less $arg | python -m json.tool
      else
        echo "$arg" | python -m json.tool
      fi
    done
  fi
}

function envgrep() {	# grep through evnironmental variables
  printenv | grep -i "$@"
}

# From Dan Ryan's blog - http://danryan.co/using-antigen-for-zsh.html
man() {		# some settings for man?
  env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
      man "$@"
}

# From commandlinefu.com
function watch-man() {
	t=$1; shift; while test :; do clear; date=$(date); echo -e "Every $ts: $@ \t\t\t\t $date"; $@; sleep $t; done
}


# == Calculation functions
function calc() {	# calcularor
  awk "BEGIN{ print $* }" ;
}

# == Begin sysadvent2011
# for instructions and other data manipulation tools from console visit:
# http://sysadvent.blogspot.com/2011/12/day-9-data-in-shell.html


function _awk_col(){  # get col number and add
  echo "$1" | egrep -v '^[0-9]+$' || echo "\$$1"
}

function sum(){   # sum by n-th field
  # usage: sum column_idx
  #
  # Example:
  # Simply sum the first field
  # % seq 10 | sum 1
  # 55
  [ "${1#-F}" != "$1" ] && SP=${1} && shift
  [ "$#" -eq 0 ] && set -- 0
  key="$(_awk_col "$1")"
  awk "$SP" "{ x+=$key } END { printf(\"%d\n\", x) }"
}

function sumby(){ # group and sum
    # usage:
    # sumby -F: group_column sum_column
    # Example:
    # # Sum one field grouping by another
    # printf "hello:1\nworld:1\nworld:3\n" |sumby -F: 1 2
    # 4 world
    # 1 hello
    #
    [ "${1#-F}" != "$1" ] && SP=${1} && shift
    [ "$#" -lt 0 ] && set -- 0 1
    key="$(_awk_col "$1")"
    val="$(_awk_col "$2")"
    awk $SP "{ a[$key] += $val } END { for (i in a) { printf(\"%d %s\\n\", a[i], i) } }"
}

function countby(){   # Count instances by field
    # Example:
    ## Count instances by field
    # % printf "hello:1\nworld:1\nworld:3\n" | countby -F: 1
    # 2 world
    # 1 hello
    #
  [ "${1#-F}" != "$1" ] && SP=${1} && shift
  [ "$#" -eq 0 ] && set -- 0
  key="$(_awk_col "$1")"
  awk $SP "{ a[$key]++ } END { for (i in a) { printf(\"%d %s\\n\", a[i], i) } }"
}
# end sysadvent

function num_columns(){  # count number of columns in csv file
    # Example:
    #  num_columns -F, data.csv
    # first argument is separator definition for AWK
    [ "${1#-F}" != "$1" ] && SP=${1} && shift
    head -n1 "$1" | awk "$SP" '{print NF}'
}

function dim(){  # display dimensions of csv file
    [ "${1#-F}" != "$1" ] && SP=${1} && shift
    head -n1 "$1" | awk "$SP" '{print "number of columns:" NF}'
    num_rows=$(wc -l < "$1")
    echo "number of rows: $num_rows"
}

function words_freq() {  # display most frequent words in the file with count
    # usage words_freq file.txt
tr -c '[:alnum:]' '[\n*]' < "$1" | sort | uniq -c | sort -nr | head -30
}

function word_cloud() {  # display most frequent words in the file
    # usage words_freq file.txt
    tr -c '[:alnum:]' '[\n*]' < "$1" | sort | uniq -c | sort -nr | head -n100 | awk '{print $2}' | tr '\n' ' '
}


function awk_col(){ # print selected column (space separated file)
    awk -F' ' "{print \$$1}"
}

function corner(){ # print top-left corner of csv (sep=,) with size n (n-rows by n-columns)
    # usage corner 10 data.csv
    head -n "$1" "$2" | cut -d',' -f-"$1"
}

# == Shell and processes functions
function procs_for_path() {		# list processes for given path
  for pid in $(lsof "$@" | cut -d' ' -f 3 | sort | uniq)
  do
    ps -f -p "$pid"
  done
}

function zombie() { # lists zombie processes
  ps aux | awk '{if ($8=="Z") { print $2 }}'
}

function get_nr_jobs(){ # get number of jobs in the system
  jobs | wc -l
}

function get_load(){  # get system load
  uptime | awk '{print $11}' | tr ',' ' '
}

function filesize-hist(){ # display distribution of file sizes in current directory
    find . -type f -print0                                                   \
 | xargs -0 ls -l                                                        \
 | awk '{ n=int(log($5)/log(2));                                         \
          if (n<10) n=10;                                                \
          size[n]++ }                                                    \
      END { for (i in size) printf("%d %d\n", 2^i, size[i]) }'           \
 | sort -n                                                               \
 | awk 'function human(x) { x[1]/=1024;                                  \
                            if (x[1]>=1024) { x[2]++;                    \
                                              human(x) } }               \
        { a[1]=$1;                                                       \
          a[2]=0;                                                        \
          human(a);                                                      \
          printf("%3d%s: %6d\n", a[1],substr("kMGTEPYZ",a[2]+1,1),$2) }'
}

function bash_repeat(){ # repeat command n times: bash_repeat 3 whoami
  n=$1
  shift
  while [ $(( n -= 1 )) -ge 0 ]
  do
      "$@"
  done
}

function authme {	# send predefined authentication key to remote host
  ssh "$1" 'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys' < ~/.ssh/gitlab_nokia_id_rsa.pub
  echo "Public key added to authorized_keys on $1"
  echo ""
  echo "Add something like this to yours ~/.ssh/config:"
  echo "Host zeus
   Hostname 10.11.12.13
   IdentityFile ~/.ssh/id_rsa
   User john
   PreferredAuthentications publickey
   IdentitiesOnly yes"
}

function ws(){ # Create new file for script with execute flag, edit in vim
    touch "$1" && chmod +x "$1" && vim "$1"
}

function fix_tmux_ssh_agent() { # ???
  for key in SSH_AUTH_SOCK SSH_CONNECTION SSH_CLIENT; do
    if (tmux show-environment | grep "^${key}" > /dev/null); then
      value=$(tmux show-environment | grep "^${key}" | sed -e "s/^[A-Z_]*=//")
      export ${key}="${value}"
    fi
  done
}

function piadd(){ # pacman install and add to ext.txt packages list
    sudo pacman -S "$1"
    local fname="$HOME/dotfiles/restore/pkg/manual.txt"
    echo ">>>> adding $1 to manual.txt package list"

    if [[ -e $fname ]]
    then
        echo "$1" >> "$fname"
    else
        echo "$1" > "$fname"
    fi

    # ensure there are no duplicates on the list
    #sort -u $fname > /tmp/sorted
    #mv /tmp/sorted $fname
}

function pacman-files(){ # list files installed with package (works for AUR too)
    pacman -Qlq "$1" | grep -v '/$' | xargs -r du -h | sort -h
}
#----------------
# dedupe path
#---------------
# In case a plugin adds a redundant path entry, remove duplicate entries
# from PATH
#
# This snippet is from Mislav MarohniÄ‡ <mislav.marohnic@gmail.com>'s
# dotfiles repo at https://github.com/mislav/dotfiles
function dedupe_path() { # In case a plugin adds a redundant path entry, remove duplicate entries from PATH
  typeset -a paths result
  paths=("$path")

  while [[ ${#paths} -gt 0 ]]; do
    p="${paths[1]}"
    shift paths
    [[ -z ${paths[(r)$p]} ]] && result+=("$p")
  done

  export PATH=${(j+:+)result}
}

function duplicate_definitions() { # display all definitions in notebooks in current dir (and below)
    find . -type f -name "*.ipynb" | xargs grep -H -e "def " | grep "(" | grep ")" | grep -v ".ipynb_checkpoints" | awk -F ':' '{print($2,"|", $1)}' | sed -e 's/^[ \t]*//' | sed 's/"//' | sed -e 's/^[ \t]*//' | sed 's/^def //'| sort | column -t -s "|"

}

function learning() { #display info on learning progress
    grep -v "^#" ~/vimwiki/pro/learning.md | awk -F';' '$1==0 {sum+=$3;} END{print "to report:"sum/60"h";}'
    grep -v "^#" ~/vimwiki/pro/learning.md | awk -F';' '$1==1 {sum+=$3;} END{print "reported:"sum/60"h";}'
}

function aac-audio-recode-file() { #recode audio track in video file to AAC fomat
    pth=$(dirname "$1")
    fname=$(basename -- "$1")
    ext=${fname##*.}
    fname_no_last_ext=${fname%.*}
    suffix="_aac"
    new_name="$pth/$fname_no_last_ext$suffix.$ext"
    ffmpeg -i "$1" -acodec aac -vcodec copy "$new_name"
}
function aac-audio-recode-dir() { # run audio recoding in whole dir
    for i in *; do aac-audio-recode-file "$i"; done
}

function get-vimeo-links() { # extract vimeo links from provided url
    wget -q $1 -O - | grep -oEi '(https:\/\/player\.vimeo.com\/video\/[0-9]*)'
}

function mman() {            # display my own complementary man pages
    cat $HOME/vimwiki/man/$1
}

function pacman-mirrors() {  # Find fastests mirrors for pacman
    timestamp=$(date +%Y-%m-%d_%H%M%S)
    target=/etc/pacman.d/${timestamp}_mirrorlist
    echo Creating backup of mirrorlist in $target
    sudo mv /etc/pacman.d/mirrorlist $target
    echo Finding fastest mirrors
    sudo reflector --score 100 --fastest 25 --sort rate --save /etc/pacman.d/mirrorlist --verbose
}

function pretty_csv {       # display csv in columns, scroll vertically and horizontally
    # from: https://www.stefaanlippens.net/pretty-csv.html
    column -t -s, -n "$@" | less -F -S -X -K
}

function gralias() { # grep ./zsh_aliases file
    grep -B1 --color=never -i -e $1 $HOME/.zsh_aliases
}

function ssh-it-github(){
    if [[ -z $1 ]]; then
        GIT_CONFIG=".git/config"
        echo "Using .git/config"
    else
        GIT_CONFIG=$1
    fi
    if [[ $OSTYPE == *darwin* ]]; then
        sed -i '' 's/url = https:\/\/github\.com\//url = github:/' "$GIT_CONFIG"
        sed -i '' 's/url = git@github.com/url = github/' "$GIT_CONFIG"
    else
        sed -i 's/url = https:\/\/github\.com\//url = github:/' "$GIT_CONFIG"
        sed -i 's/url = git@github.com/url = github/' "$GIT_CONFIG"
    fi
}





function ys-popular(){
    ys $1 | grep -e + | sed -e 's/(+//' | awk -F' ' '{print $3", "$1}' | sort -nr | head -10
}

function zsh-stats() {
  fc -l 1 | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl | head -n25
}

#!/usr/bin/env bash
#
# Only including a shebang to trigger Sublime Text to use shell syntax highlighting
#
# vi ft=shell

# requirements:
# pydf - for df replacement,
# sar - for load,
# expac - for bigpkg
# pacman - bigpkg
# exa - for ls replacement
# yay/paru
# restic for backups
# reflector
# tmux, ranger, typora, vscode, atom, yt-download
# git guilt
# ranger
# autorandr
# rofi (Linux) or choose (macOS)
# pipdeptree - for python packages dependency tree, top-level packages
# git-guilt - for checking how blame was transfered from one author to another
#             in given range of time
# pycodestyle - for pep8-stats
# kubectl
# gdmap
# doublecmd

# Sections in this aliases file
# - FILESYSTEM - DIRECTORY SIZE, LISTING
# - LS
# - QUICK CHANGE DIRECTORY/Bookmarks
# - EDIT ACTIONS
# -
# -

#--------------------------------------------
## PROGRAM ALTERNATIVES
#--------------------------------------------
# use neovim in place of vim if available
if [ "$(command -v nvim)" ]; then
    VIM=nvim
else
    VIM=vim
fi


if [ "$(command -v subl)" ]; then
    S=$(which subl)
fi
#--------------------------------------------
## GLOBAL ALIASES (EXPANDED IN ZSH WITH SPACE)
#--------------------------------------------
alias -g G='| grep'
alias -g W='| wc -l'
alias -g H='| head'
alias -g L='| less'
alias -g F="find . -type f -name '*'"
alias -g FE="find . -type f -name '*' -exec mv {} . \;"
alias -g A="| awk -F',' '{print $1 $2}'"

# sum the column of numbers
alias -g AS="| awk '{s+=\$1} END {print s}'"
# launch parallel processes using xargs
alias -g X='| xargs -n1 -P$(nproc) -I{}'

if [[ $OSTYPE == *darwin* ]]; then
    alias -g R='| choose'
    alias docker="/Applications/Docker.app/Contents/Resources/bin/docker"
else
    alias -g R='| rofi -i -dmenu'
fi

# pass output from find to xargs while displaying progress bar
# pv: l-count lines instead of bytes, 0 - lines null-terminated, s - provide size
# usage:
alias -g FPX="FIND=(find . -type f -name '*.gz') && \${FIND[@]} -print0 | pv -0lps \$(\${FIND[@]} | wc -l) | xargs -0 -n1 -P36 -I{}"
# poor-man's wait
alias -g W='while true; do ls; sleep .5; done'
# repeat command multiple times
alias -g FI='for i in {1..3}; do ls; sleep 1  done'

#--------------------------------------------
## FILESYSTEM - DIRECTORY SIZE, LISTING
#--------------------------------------------
# requrements: pydf, sar, wget, zsh

# list size of top 11 directories
alias ducks='du -cksh * | sort -rh | head -11'

# list directory size in current dir
alias duu='du -sh'

# free/used space on devices
if hash pydf 2>/dev/null; then
    alias df="pydf"
fi

# free/used space on disk devices
alias dfd="pydf | head -n 1; pydf | grep --colour=never /dev/sd"

# display CPU load (requires sar installed)
alias load='sar -u 2 1 | tail -n 1'

# Find 10 largest files
alias top10files="find . -type f -print0 | xargs -0 du | sort -n | tail -10 | cut -f2 | xargs -I{} du -sh {}"

# Find 10 largest directories
alias top10dirs="find . -type d -print0 | xargs -0 du | sort -n | tail -10 | cut -f2 | xargs -I{} du -sh {}"

alias cx="chmod +x"

# make all shell scripts in current directory executable
alias cxsh="chmod +x *.sh"

# count files in dir
alias cf='ls | wc -l'

# force remove directory - typed without hyphens
alias rmrf='rm -rf'

# On the rare occasions I don't want to continue a download I can always
# delete the incomplete fragment explicitly. I usually just want to
# complete it.
alias wget="wget -c"

# dd image with usb specific sync options. Usage: dd-usb if=./linux.iso of=/dev/sdb
alias dd-usb="sudo dd bs=4M status=progress conv=fdatasync"

# measure zsh loading time
alias zsh-loading-time="for i ({1..10}) time zsh -i -c exit"
# other command for comparing startup time:
# for i ({1..10}) time zsh -ilc echo &>/dev/null || true

#--------------------------------------------
## LS
#--------------------------------------------
# requirements: exa

# Smart ls alias (l=long, detailed, a=all including hidded, h=size human readable)
alias ls='ls --color=auto'

if [ "$(command -v exa)" ]; then
	alias l="exa -lah --git"
else
	alias l="ls -lah"
fi

# -F, --classify append indicator (one of */=>@|) to entries
# alias l="ls -laF"

# ls almost-all (-A: do not list . and ..)
alias la='ls -A'

# list long, almost all
alias ll='ls -lA'

# list just 'head' of directory listing (e.g. first 10 entries)
alias lh='ls -Alh --color | head; ls -Al | wc -l | xargs -I{} printf "\nShowing max 10 out of {} entries\n"'

#--------------------------------------------
## QUICK CHANGE DIRECTORY/Bookmarks
#--------------------------------------------
#requirements:

alias ..="cd .."
alias ...="cd ../.."
alias cd..="cd .."
alias 1="cd .."
alias 2="cd ../.."
alias 3="cd ../../.."
alias 4="cd ../../../.."

# same convention, defined below:
# quick cd to wiki (my notes and diary) home
alias cdw="cd $WIKI_HOME"

# quick cd to directory with projects
alias cdp="cd $HOME/projects"

# quick cd to directory with python virtualenvs
alias cdv="cd $HOME/.virtualenvs"

#--------------------------------------------
## EDIT ACTIONS
#--------------------------------------------
# requirements: atom, code

# run atom without hardware accelleration
alias atom="atom --disable-gpu"

# run visual studio code without hardware acceleration
alias code="code --disable-gpu"

alias vim=$VIM
# shortcuts to edit files (mostly config files)
alias vz="$VIM $HOME/.zshrc"
alias vzs="$VIM $HOME/.zgen-setup"
alias vv="$VIM $HOME/.vimrc"
alias va="$VIM $HOME/.zsh_aliases"
alias vf="$VIM $HOME/.zsh_functions"
alias vc="$VIM $HOME/.config"
alias vs="$VIM $HOME/.ssh/config"
alias vg="$VIM $HOME/.gitconfig"
alias vgg="$VIM ./.git/config"

# shortcuts for openbox config files
alias voa="$VIM $HOME/.config/openbox/autostart"
alias vor="$VIM $HOME/.config/openbox/rc.xml"

alias vh='sudo $VIM /etc/hosts'

# list $VIM key mappings
alias vkeys="grep --color=never -e 'map' $HOME/.$VIMrc"

if [ "$(command -v $S)" ]; then
  alias s-z="$S $HOME/.zshrc"
  alias s-zs="$S $HOME/.zgen-setup"
  alias s-v="$S $HOME/.vimrc"
  alias s-a="$S $HOME/.zsh_aliases"
  alias sor="$S $HOME/.config/openbox/rc.xml"
  alias soa="$S $HOME/.config/openbox/autostart"
fi

alias sz="source ~/.zshrc"

alias update-grub='sudo grub-mkconfig -o /boot/grub/grub.cfg'

#--------------------------------------------
## MEATA-ALIAS, FUNCTIONS
#--------------------------------------------
# grep aliases active in current shell
alias galias="alias | grep --color=never -i -e"
# list functions
alias list-functions="grep function ~/.zsh_functions --color=never | sed 's/^function//' | sed 's/{//' | grep '[a-Za-z0-9\-_]*()' --color=always | column -t -s# | less"
alias _="sudo"


#--------------------------------------------
## DEBIAN PACKAGE MANAGERS - APT, APTITUDE, DPKG
#--------------------------------------------
# install packages (Debian)
alias ai="sudo apt install"
# search pattern only in package names
alias asn="apt-cache --names-only search"
alias as="apt-cache search"
alias purge='dpkg --list |grep "^rc" | cut -d " " -f 3 | xargs sudo dpkg --purge'
alias au="sudo apt update"
#alias largest-packages=dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n

#-------------------------------------------
## ARCH PACKAGE MANAGERS - PACMAN, YAY (for AUR)
#-------------------------------------------
# select AUR helper to use
AUR_CMD="yay" # yay | paru

# install official Arch package
alias pi="sudo pacman -S"

# install AUR or official package with AUR helper (e.g. yay)
alias yi="$AUR_CMD -S --answerclean None --answerdiff None"

# search for official Arch package
alias pas="pacman -Ss"

# search for AUR and official Arch packages
alias  ys="$AUR_CMD -Ss"

# AUR package information
alias  y-info="$AUR_CMD -Si"

# official Arch package information
alias  p-info="pacman -Si"

# files belonging to Arch package
alias  p-files="pacman -Fl"

# statistics over all packages
alias y-stats="$AUR_CMD -P --stats"

# clear paru cache
alias paru-cache-clear="$AUR_CMD -Sc --aur"

# remove (uninstall) package
alias prm="sudo pacman -Rns"

alias pacman="pacman --color=always"
# alias pacman='sudo pacman --color auto'

# update
alias pacu="sudo pacman -Syu --color=always"

alias uy="$AUR_CMD -Syua --answerclean None --answerdiff None" # options for yay

alias pacman-bigpkg="expac -s '%-30n %m' | sort -rhk 2 | less"
alias y-upgradable="sudo $AUR_CMD -Pu"
alias y-rem-dep="sudo $AUR_CMD -Yc"
#alias p-rm-orphans="sudo pacman -Rns $(pacman -Qtdq)"
alias unlockdb="sudo rm /var/lib/pacman/db.lck"

#--------------------------------------------
## MACOS PACKAGE MANAGER - BREW
#--------------------------------------------
# install package with brew
alias bi="brew install"
# search brew package
alias bs="brew search"
alias bu="brew update && brew upgrade && brew cleanup"

#--------------------------------------------
## FASD ALIASES
#--------------------------------------------
# (repeated - aliases are defined in fasd source)
alias a='fasd -a'        # any
#alias s='fasd -si'       # show / search / select
alias d='fasd -d'        # directory
alias f='fasd -f'        # file
alias sd='fasd -sid'     # interactive directory selection
alias sf='fasd -sif'     # interactive file selection
alias z='fasd_cd -d'     # cd, same functionality as j in autojump
alias zz='fasd_cd -d -i' # cd with interactive selection

alias v='f -e $VIM' 	# quick opening files with vim
alias s='f -e $S'
alias m='f -e mplayer' 	# quick opening files with mplayer
alias o='a -e xdg-open' # quick opening files with xdg-open

# v def conf       =>     vim /some/awkward/path/to/type/default.conf
# j abc            =>     cd /hell/of/a/awkward/path/to/get/to/abcdef
# m movie          =>     mplayer /whatever/whatever/whatever/awesome_movie.mp4
# o eng paper      =>     xdg-open /you/dont/remember/where/english_paper.pdf
# vim `f rc lo`    =>     vim /etc/rc.local
# vim `f rc conf`  =>     vim /etc/rc.conf


#---------------------------------------------
## MOUNT
#---------------------------------------------
alias mt="mount | column -t"
alias gmount="mount | grep -i -e"
# list disks/partitions
alias mountd="mount | grep /dev/sd | column -t"

#--------------------------------------------
## FIND (IN) FILES
#--------------------------------------------

# find files in current directory
alias ff-here="find . -maxdepth 1 -type f"

# find test function
alias ft="find ./ -name 'test*.py' | grep"

# find in files (excluding .git directories)
alias fif="grep -F --exclude-dir={.git} --color=auto -rnw ./ -e"

# find in python files (excluding .git directories)
alias fipy1="grep -F --include=\"*.py\" --exclude-dir={.git} --color=always -rnwi ./ -e"

# find in python test files (pyt - python tests)
alias fipyt="grep -F --include=\"test*.py\" --exclude-dir={.git} --color=always -rnwi ./ -e"

# find in python files excluding tests (pynt - python no tests)
alias fipynt="grep -F --include=\"*.py\" --exclude-dir={.git,tests} --color=always -rnwi ./ -e"

# find markdown files created today
alias mdtoday="find . -name \"*.md\" -mtime -1 -type f -print"

#alias todo-extract="find ./ | xargs grep -h \"TODO:\" | sed \"s/^[ \s]*//g\""
# extract TODO/FIXME from files in current directory (recursive) and print to
# stdout
alias todo-extract-proj="find . -name \"*.py\" ! -path \"*/.tox/*\" | xargs grep -h \"TODO:\|FIXME:\" 2>/dev/null | sed \"s/^[ \s]*//g\" | sed \"s/TODO://\" | sed \"s/FIXME://\" | sed \"s/# # /# /g\""
# Exract TODOS with reference to source file. Useful for python
alias todo-extract-ref="find $(pwd) -name \"*.py\" ! -path \"*/.tox/*\" | xargs grep -Hn \"TODO:\|FIXME:\" 2>/dev/null | sed \"s/^[ \s]*//g\" | sed \"s/# # /# /g\""

#alias finde='find -L . -type d \( -path "*.git" -o -path "*.fzf*" -o -path "*/Documents" -o -path "*/Downloads" -o -path "*.cache" -o -path "*/Pictures" -o -path "*/.mozilla" -o -path "*.jg" \) -prune -o -print'

# find with certain exclusions
alias finde="find . ! -path '*/.venv*' ! -path '*/.fzf*' ! -path '*./bulk*' ! -path '*.cache*' ! -path '*.git/*' ! -path '*.mozilla*' ! -path '*.jd*' ! -path '*.zgen/*' ! -path '*.vim*' ! -path '*.zplug*'"
alias finde-files="find . -type f ! -path '*/.venv*' ! -path '*/.fzf*' ! -path '*./bulk*' ! -path '*.cache*' ! -path '*.git/*' ! -path '*.mozilla*' ! -path '*.jd*' ! -path '*.zgen/*' ! -path '*.vim*' ! -path '*.zplug*'"

#--------------------------------------------
## GIT
#--------------------------------------------
# git push with verbose ssh (useful for troubleshooting)
alias gpv="GIT_SSH_COMMAND=\"ssh -v\" git push"

# open git gui
alias gg="git gui"

# open git gui for single commit
alias gg1="git gui citool"

# list branches you worked on recently
alias recent-branches="git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format=\"%(refname:short)\""

# list git repos in current directory
alias git-repos="find ./ -name \"*.git\" -type d | sed 's/\.git$//'"

# find all git repositories in current directory excluding vim files (usually vim plugins)
alias find-git-repos="find . -name \".git\" -type d | sed s/\.git//g | grep -v '.vim/'"

# quick push (with not too correct message)
alias gpq="git add . && git commit -m 'update' && git push"

alias devl="git checkout development"
alias dev="git checkout develop"

alias lg="git --no-pager log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative -15"

#alias lg2="!git lg2" # TODO
#alias lg3="!git lg3" #TODO
alias my-week="git lg1-my-week"
alias all-week="git lg1-all-week"
alias week-stats="git stats --until='7 days ago'"
# TODO: change to function or repair:
#alias all-my-todos="for FILE in $(git ls-files) ; do git blame $FILE | grep 'Krystian' | grep 'TODO'; done | less"

# git guilt
# https://www.atlassian.com/blog/archives/git-guilt-blame-code-review
#how blame shifted from one author to another during your last commit:
# git guilt HEAD~1

# see how many lines were modified by author
alias git-contributors='git ls-files -z | xargs -0n1 git blame -w | perl -n -e '\''/^.*?\((.*?)\s+[\d]{4}/; print $1,"\n"'\'' | sort -f | uniq -c | sort -n'

alias st="git status --short"
alias gp="git push"
alias whoamigit="git config --get user.email;git config --get user.name"

#--------------------------------------------
## PYTHON, SOFTWARE PROJECT
#-------------------------------------------
# provide pep8 violation statistics for current directory (.)
alias pep8-stats="pycodestyle --statistics -qq . | sort -k 1 -n -r"

# flake8 - perform important checks for docstrings
alias flake8-docstrings="flake8  --select D100, D101, D104, D107"

# count lines of code
alias count_loc="wc -l **/*.py"



# test statistics
alias test-num-files="find ./ -name \"test*\" | wc -l"
alias test-num-cases="ag \"class Test\" | wc -l"
alias test-num="ag \"def test_\" | wc -l"
alias test-num-assertions="ag \"self.assert|ok_|eq_\" | wc -l"
alias test-integration-list="find . -type f -name \"test_integration*\" | xargs grep -H -A 1 \"def test\" | sed 's/def//' | sed 's/self//' | sed 's/://'"

# colored cat for source code (outdated, use bat instead)
#alias ccat=ccat.sh

alias wn="workon"
alias venv-path="echo \$(dirname \$(dirname \$(which python3)))"
#-------------------------------------------
## JUPYTER NOTEBOOKS
#-------------------------------------------
alias jl="jupyter lab"
alias jn="jupyter notebook"

# jupytext - synchronize all notebooks and in current directory, no recursive
alias jupysync-all-in-current-dir="find ./ -maxdepth 1 -name '*.ipynb' | xargs jupytext --sync"

# jupytext - synchronize all notebooks and in current directory, no recursive (requires pip install "black[jupyter]")
alias jupysync-all-in-current-dir-and-blak="find ./ -maxdepth 1 -name '*.ipynb' | xargs jupytext --pipe black --sync"

# jupytext - pair all notebook in current dir and subdirs with py:percent scripts
alias jupypair-all-notebooks-in-current-dir="find . -name '*.ipynb' | xargs jupytext --set-formats ipynb,py:percent"

#-------------------------------------------
## PIP
#-------------------------------------------
# upgrade all pip packages (system or virt-env if in virt-env)
alias pip-upgrade-script='pip freeze local > ~/pip_before_upgrade.txt && sudo -h pip install pipdate && sudo -H pipdate'

# upgrade pip itself
alias pipup="pip install --upgrade pip"

# list outdated packages (upgradable)
alias pip-outdated="pip list --outdated --format=freeze"

# list all top level packages available in environment
#alias pip-top-level="pipdeptree -fl | grep -P '^\w'"  # https://pypi.org/project/pipdeptree/
alias pip-top-level="pipdeptree -fl | grep '^\w'"  # https://pypi.org/project/pipdeptree/

# pip install from requirements
alias pipr="pip install -r"

# pip list installed packages with version info
alias pipl="pip list"

# pip install requirements.txt
alias piprr="pip install -r requirements.txt"

# pip install requirements-dev.txt
alias piprd="pip install -r requirements-dev.txt"

#-------------------------------------------
## DJANGO, MANAGE.PY
#--------------------------------------------
alias mp="./manage.py"
alias mpr="./manage.py runserver"
alias mprp="./manage.py runserver_plus"
alias mpm="./manage.py migrate"
alias mpk="./manage.py makemigrations"
alias mps="./manage.py showmigrations"
alias mpsp="./manage.py shell_plus"
alias mpc="./manage.py createsuperuser"
alias mptc='coverage run ./manage.py test --pattern="test_*.py"'
alias mpt='./manage.py test --pattern="test_*.py"'
alias list-models="find . -type f -name 'models.py' | xargs grep -H -P '^class' | sed 's/class/''/' | sed -E 's/\(.*$/''/' | grep -v -P '.+:$' | sed 's/\/models\.py:/''/'"

#--------------------------------------------
## DOCKER (and docker-compose)
#-------------------------------------------
alias dcf="docker-compose -f dev-compose.yml"
alias dl='docker ps -lq'
alias dll='docker_fit ps -l'
alias dps='docker_fit ps -a'
alias docker-clean-exited-containers='docker ps -aqf status=exited | xargs -n1 docker rm'
alias docker-list-untagged-images='echo $(docker images | grep "<none>" | awk "{print \$3}")'
alias docker-remove-untagged-images='docker rmi -f $(docker images -a| grep "<none>" | awk "{print \$3}")'

alias c='docker-compose'
alias cb='docker-compose build'
alias cup='docker-compose up'
alias cr='docker-compose run --service-ports --rm'
alias crl='docker-compose run --service-ports --rm local'
alias crd='docker-compose run --service-ports --rm develop'
alias crt='docker-compose run --rm test'
alias crp='docker-compose run --rm provision'
alias crci='docker-compose run --rm ci'
alias crwt='docker-compose run --rm watchtest'
alias cps='docker-compose ps'
alias clogs='docker-compose logs'

function crm(){
	docker-compose stop $1
	docker-compose rm --force $1
}

#--------------------------------------------
## CALIBRE & RECOLL
#--------------------------------------------
CALIBRE_DIR="/mnt/NAS/books"
alias c-it="calibre --with-library=$CALIBRE_DIR/books_it"
alias c-astro="calibre --with-library=$CALIBRE_DIR/books_astro"
alias c-life="calibre --with-library=$CALIBRE_DIR/books_life"
alias c-ml="calibre --with-library=$CALIBRE_DIR/books_ml"
alias r-it="recoll -c $HOME/.recoll_indexes/.recoll_it"
alias r-astro="recoll -c $HOME/.recoll_indexes/.recoll_astro"
alias r-life="recoll -c $HOME/.recoll_indexes/.recoll_life"
alias r-ml="recoll -c $HOME/.recoll_indexes/.recoll_ml"

#---------------------------------------------
## TEXT MANIPULATION, COMMENTS, COLOR REMOVAL
#---------------------------------------------
# grep no comments
alias catnc="egrep -v \"^\s*(#|\$)\""
alias grepnc1="egrep -v \"^\s*(#|$)\""

# remove comments from file and remove empty line after removing comment
alias rm-comments="sed -e \"s/#.*$//gi\" -e \"/^$/d\""

# Strip color codes from commands that insist on spewing them so we can
# pipe them into files cleanly
alias stripcolors='sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"'

# join two consecutive lines in one line
alias oneline="sed -rn 'N;s/\n/ /;p'"

alias skip-header='tail -n +2'

#---------------------------------------------
## HISTORY
#---------------------------------------------

# show 50 most used cli commands (assuming duplicates are not removed from
# history)
alias history-top="history |  cut -c7- | sort  | uniq -c | sort -nr | head -n 50"
alias historysummary="history | awk '{a[\$2]++} END{for(i in a){printf \"%5d\t%s\n\",a[i],i}}' | sort -rn | head"
# Dump the last 20 history entries
alias zh="fc -l -d -D"
# see also: zsh_stats

# lsblk
# dd bs=4M if=/path/to/archlinux.iso of=/dev/sdx status=progress oflag=sync

#---------------------------------------------
## IP
#---------------------------------------------
# A couple of different external IP lookups depending on which is down.
alias external_ip="curl -s icanhazip.com"
alias myip="dig +short myip.opendns.com @resolver1.opendns.com"
# Show laptop's IP addresses
alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"

#---------------------------------------------
## SSH
#---------------------------------------------
# Pass our credentials by default
alias ssh="ssh -A"
alias sshA="ssh -A"
alias ssh_unkeyed="/usr/bin/ssh"

alias scp_no_hostchecks="scp -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
alias ssh_no_hostchecks="ssh -A -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

#--------------------------------------------
## SYSTEM MONITORING, SYSTEM INFO
#--------------------------------------------
# top, order by field %CPU
alias cputop="top -o %CPU"

# top, order by field %MEM
alias memtop="top -o %MEM"

# list network interfaces
alias interfaces="ls /sys/class/net"

# set display brightness
alias brightness="xrandr --output LVDS-1 --brightness $1"

# list boots
alias boots="journalctl --list-boots"

# -t bios, system, baseboard, chassis, processor, memory, cache, connector, slot
alias hardware-info="sudo dmidecode - system" # hardware, serial number

# list monitors
alias monitors="cat /sys/class/drm/card*/edid | tr -cd '\11\12\15\40-\176'"

# run aurtorandr and select configuration from menu
if [[ $OSTYPE != *darwin* ]]; then
    alias rrr="autorandr | rofi -i -dmenu | awk -F'(' '{print $1}' | xargs autorandr"
fi
#--------------------------------------------
## TMUX
#--------------------------------------------
# shortcut for tmuxifier
alias tw="tmuxifier load-window"

# tmux attach
alias ta="tmux a"

#--------------------------------------------
## YOUTUBE DOWNLOADERS, MEDIA CONVERTERS
#--------------------------------------------
#select engine: youtube-dl | yt-dlp
YTDL=yt-dlp
# Extract audio to mp3 format, add thumbnail and metadata
alias ytmp3='$YTDL -o "%(title)s.%(ext)s" -f bestaudio --extract-audio --embed-thumbnail --add-metadata --audio-format mp3 --prefer-ffmpeg'

# Convert all mp4 files in current dir to mp4
alias mp4-to-mp3-dir='for i in *.mp4; do ffmpeg -i "$i" -q:a 0 -map a "$(basename "${i/.mp4}").mp3"; done;'

# Convert single mp4 file to mp3
alias mp4-to-mp3='ffmpeg -q:a 0 -map a "$(basename "${i/.mp4}").mp3" -i'

#alias mp4-to-wav='ffmpeg -ac 1 -ar 16000  "$(basename "${i/.mp4}").wav" -i'
#alias mp4-to-wav='ffmpeg -i "$1" -ac 1 -ar 16000 "$(basename "${1%.*}").wav"'
alias mp4-to-wav='filename=$(basename -- "$1"); ffmpeg -i "$1" -ac 1 -ar 16000 "${filename%.*}.wav"'


# Extract best possible audio quality with original format without encoding
alias yt-audio="$YTDL -f bestaudio --extract-audio --embed-thumbnail --add-metadata"

# Download video (or whole playlist of videos) with addional file for
# description nad thumbnail. Force AAC audio encoding to for smartTV
# compatibility
# add --write-sub for downloading subtitles

#alias ytdl="$YTDL -f best --write-description --write-thumbnail --audio-format aac"
alias ytdl="$YTDL --write-description --write-thumbnail --audio-format aac"
alias yt-subs-en="$YTDL --write-description --write-subs --skip-download"
alias yt-autosubs-en="$YTDL --write-description --write-auto-subs --skip-download"
#--------------------------------------------
## DIARY, NOTES
#--------------------------------------------
# see also vimwiki related functions in ~/.zsh_functions

# private knowledge base and diary
export WIKI_HOME="$HOME/vimwiki"

# find days marked with [x]
alias gmark="find $HOME/vimwiki/diary -name '*.md' | xargs grep -F '[x]' | grep -v medytacja | awk -F'/' '{print \$NF}' | sed s'/.md//' | sed s'/_/ /' | sed 's/:\[x\]//' | sort"

# display frequency stats (per day) for days marked with [x]
alias gmark-days="find ~/vimwiki/diary -name '*.md' | xargs grep -F '[x]' | awk -F'/' '{print \$NF}' | tr . _ | awk -F'_' '{print \$2}' | sort | uniq -c | sort -nr"

# shortcut for diary ('t' -> today, 't -1' -> yesterday)
alias t='diary'

# display diary status for last days
alias diary-status='$HOME/scripts/runonce-scripts/400-check-if-diary-for-last_days.sh'

#--------------------------------------------
## APP LAUNCHERS
#--------------------------------------------
# double commander here - run double commander in current directory
alias duch="doublecmd .&"

alias windirstat="gdmap"

# gramps launcher
alias gramps="GRAMPSDIR=$HOME/Documents/priv/Gramps/ LANGUAGE=pl_PL:pl LANG=pl_PL.UTF-8 gramps"

# shortcut to see the status (stage and commit changes if needed)
alias tis='tig status'

# shortcut for ranger
alias rr="ranger"

# mc with exit to current directory (On exit, the shell returns to the directory Midnight Commander was started from, instead of the last active directory.)
#alias mc=". /usr/lib/mc/mc-wrapper.sh"

#--------------------------------------------
## OTHER
#--------------------------------------------
alias vpn="sudo vpnc nokia-fi && ~/nsn/proxy/redsocks.sh && echo '- use Nokia DNS for VPN' && ~/nsn/copy-resolv-conf.sh"
alias vpn-de="sudo vpnc nokia-de && ~/nsn/proxy/redsocks.sh && echo '- use Nokia DNS for VPN' && ~/nsn/copy-resolv-conf.sh"
alias novpn="sudo vpnc-disconnect && ~/nsn/proxy/redsocks-stop.sh && echo '- reload NetworkManager to restore DNS settings'  && sudo systemctl reload NetworkManager"

# decrypt volume without mounting, then use e.g. test disk etc.
# veracrypt --filesystem=none -m nokernelcrypto --mount bulk/bbb /mnt/veracrypt3

alias podlogs="kubectl -n dip get pods | fzf | awk_col 1 | xargs kubectl -n dip logs -f"

alias dlqa="curl -L https://raw.githubusercontent.com/izikeros/scripts/main/my_scripts/install_qa.sh | sh"

# https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-zmv
# Move (usually, rename) files matching the pattern srcpat to corresponding
# files having names of the form given by dest, where srcpat contains parentheses
# surrounding patterns which will be replaced in turn by $1, $2, ... in dest.
# For example,
# zmv '(*).lis' '$1.txt'
# renames ‘foo.lis’ to ‘foo.txt’, ‘my.old.stuff.lis’ to ‘my.old.stuff.txt’, and so on.
alias zcp='zmv -C'
alias zln='zmv -L'
alias cov-show='open htmlcov/index.html'

# Fuzzy search every line in every file
alias fzgrep='rg . | fzf'
# Fuzzy search every line, in every file, and return the file location
alias fzlocate='rg . | fzf | cut -d ":" -f 1'
# Fuzzy search every line, in every file, and open that file
alias fvim='vim $(rg . | fzf | cut -d ":" -f 1)'
# Rename all images in current directory to have a name with sequence number
alias img-rename-to-sqeuence='counter=0; extensions=("jpg" "jpeg" "png" "gif" "tiff" "heic" "heif"); for ext in "${extensions[@]}"; do shopt -s nullglob; files=(*."$ext"); shopt -u nullglob; if [[ ${#files[@]} -eq 0 ]]; then continue; fi; for file in "${files[@]}"; do newname=$(printf "img_%03d.%s" "$counter" "$ext"); mv "$file" "$newname"; ((counter++)); done; done'
# Uninstall all system-wide python packages except pip
alias pip-uninstall-all="pip list --format freeze | awk -F '==' '{print $1}' | grep -v pip | xargs pip uninstall -y"




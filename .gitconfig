# https://csswizardry.com/2017/05/little-things-i-like-to-do-with-git/
# https://hackernoon.com/lesser-known-git-commands-151a1918a60
# https://blog.scottnonnenberg.com/better-git-configuration/
[alias]
	########### Basic aliases ###########
	br = branch -v

	# add to staged and commit (new files should be added anyway)
	ca = commit -a

	cam = commit -am
	ci = commit
	cm = commit -m

	cl = clone

	diff = diff --word-diff
	dc = diff --cached

	co = checkout
	k = !gitk
	pu  = pull
	pur = pull --rebase


	######## LOG and DIFF ###############
    #
    # https://git-scm.com/docs/git-log#_options
    #
    # show commits that differs Head and and origin/master (??)
    # (seems powerfull but not sure how it works)
    h = !git --no-pager log origin/master..HEAD --abbrev-commit --pretty=oneline

    # baseline log - showing tree, relative date,...
    lg1 = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

    # more info
    lg2 = log --graph --abbrev-commit --decorate --all --format=format:\"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)\"

    # List commits showing changed files
    lg3 = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat


    # see all the commits related to a file, with the diff of the changes
    lg-filelog = log -u

    ####### WHAT'S UP? ##########
    # List today's oneline commits
    lg-today = log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --color --date=short --since=midnight
    lg1-my-week = log --graph --pretty=format:'%C(yellow)%d%Creset %s %Cgreen(%ad, %cr)' --abbrev-commit --date=short --all --since='1 week' --no-merges --author=krystian.safjan@wilabs.com
    lg1-all-week = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --all --since='1 week' --no-merges
    log-all-week = git log --all --since='1 weeks' --oneline --no-merges

    # see commit stats per author
    stats = shortlog -sn --all --no-merges

    ### log  formatting variants
	# List commits in short form, with colors and branch/tag annotations
	lg-short-commits = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate

	# List with no colors if you need to chain the out put with Unix pipes:
    lg-no-colors = log --pretty=format:"%h\\ %s\\ [%cn]"

	## List oneline commits
	# 	showing dates
	lg-dates = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
	lstat = log --pretty=format:"%ad\\ %cn" --date=short

    # 	showing relative dates: (e.g. $ git ld -10)
	lg-dates-relative = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative

	# short git log
    lg-short-log = log --oneline --decorate

	# Show modified files in last commit:
	dl = "!git ll -1"

	# Show a diff last commit e.g.:
	# $ git f trenches
	# source/drafts/2012-11-12-more-curated-git-tips-from-the-trenches.html.md
	dlc = diff --cached HEAD^

	#### FIND & GREP
	# Find a file path in codebase:
	f = "!git ls-files | grep -i"

	# Search/grep your entire codebase for a string
	grep = grep -Ii
	gr = grep -Ii

	# Grep from root folder:
	gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

	# List all your Aliases
	la = "!git config -l | grep alias | cut -c 7-"

	find = !sh -c 'git ls-tree -r --name-only HEAD | grep --color $1' -

	st = status
	unstage = reset HEAD --
	v = !gvim $*

	### TAG
	lasttag = describe --tags --abbrev=0
	lt = describe --tags --abbrev=0
	lt1 = !git describe $(git rev-list --tags --max-count=1)

	### MERGE
    # delete all branches merged with master
	cleanup = !git branch --merged master | grep -v 'master$' | xargs git branch -d

	ours = "!f() { git co --ours $@ && git add $@; }; f"
	theirs = "!f() { git co --theirs $@ && git add $@; }; f"

	### reset commands
	r = reset
	r1 = reset HEAD^
	r2 = reset HEAD^^
	rh = reset --hard
	rh1 = reset HEAD^ --hard
	rh2 = reset HEAD^^ --hard

	### STASH
	sl = stash list
	sa = stash apply
	ss = stash save

[merge]
    #tool = mymeld
    tool = kdiff3
    conflictstyle = diff3
[mergetool "mymeld"]
    #cmd = meld --diff $BASE $LOCAL --diff $BASE $REMOTE --diff $LOCAL $BASE $REMOTE $MERGED
    cmd = meld --diff $BASE $LOCAL --diff $BASE $REMOTE --auto-merge $LOCAL $BASE $REMOTE --output $MERGED
[mergetool "kdiff3"]
    trustExitCode = false
[diff]
    guitool = meld
    #guitool = kdiff3
[difftool "kdiff3"]
    trustExitCode = false

[user]
	name = Krystian Safjan
	email = krystian.safjan@wilabs.com
[push]
	default = current
[core]
	editor = vim
#[core]
#	autocrlf = true
#	eol = lf
#[diff]
#	tool = winmerge
#[difftool "winmerge"]
#	name = WinMerge
#	trustExitCode = true
#	cmd = winmerge-merge.sh $LOCAL $REMOTE

#[push]
#	default = simple
#[merge]
#	tool = p4merge
#[mergetool "kdiff3"]
#	name = Kdiff3
#	prompt = false
#	keepBackup = false
#	keepTemporaries = false
#	path = C:\\Program Files (x86)/KDiff3/kdiff3.exe
#	trustExitCode = true
#[mergetool "p4merge"]
#	name = p4merge
#	path = C:/Program Files/Perforce/p4merge.exe
#    prompt = false
#	trustExitCode = true
#[mergetool "winmerge"]
#	name = winmerge
#	trustExitCode = true
#	cmd = winmerge-merge.sh $LOCAL $REMOTE $BASE $MERGED
#[difftool "sourcetree"]
#	cmd = 'C:/Program Files (x86)/KDiff3/kdiff3.exe' \"$LOCAL\" \"$REMOTE\"
#[mergetool "sourcetree"]
#	cmd = 'C:/Program Files (x86)/KDiff3/kdiff3.exe' \"$BASE\" \"$LOCAL\" \"$REMOTE\" -o \"$MERGED\"
#	trustExitCode = true
#[mergetool]
#	prompt = false
#	keepBackup = false

